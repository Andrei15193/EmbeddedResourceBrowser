using System.Linq;
using System.Reflection;
using CodeMap.DeclarationNodes;
using CodeMap.DocumentationElements;
using CodeMap.ReferenceData;
using static CodeMap.DocumentationElements.DocumentationElement;

namespace EmbeddedResourceBrowser.Documentation
{
    public class DocumentationAdditon : AssemblyDocumentationAddition
    {
        public override bool CanApply(AssemblyDeclaration assembly)
            => true;

        public override SummaryDocumentationElement GetSummary(AssemblyDeclaration assembly)
            => Summary(
                Paragraph(
                    Text(
                        (string)assembly.Attributes.Single(attribute => attribute.Type == typeof(AssemblyDescriptionAttribute)).PositionalParameters.Single().Value
                    )
                )
            );

        public override RemarksDocumentationElement GetRemarks(AssemblyDeclaration assembly)
        {
            var memberReferenceFactory = new MemberReferenceFactory();
            return Remarks(
                Paragraph(
                    Text("The library is rather small and provides a directory-like structure for browsing embedded resources. There are two ways of using the library, one is by loading a single assembly. In this case the root "),
                    MemberReference(memberReferenceFactory.Create(typeof(EmbeddedDirectory))),
                    Text(" is the root folder of the assembly itself. From here you can browse other embedded directories or files located at in the top folder.")
                ),
                Paragraph(
                    Text("Keep in mind that the delimiter for embedded resources is '.' rather than '/' or '\\' meaning that there is a small difficulty in generating the exact same directory structure as in the assembly.")
                ),
                Paragraph(
                    Text("The folder structure is generated by using the '.' delimiter as a directory delimiter with two exceptions. All files are expected to have an extension, this makes the last '.' character to not be considered as a directory delimiter but rather part of the file name.")
                ),
                Paragraph(
                    Text("The second exception comes to the assembly name. Embedded resources all start with the assembly name followed by the folder names and finally ending with the file name. Since the assembly name can be obtained when going through the embedded resources, all '.' characters that are part of the assembly name remain that way and are not considered as a directory delimiter.")
                ),
                Paragraph(
                    Text("This simplifies the lookup process, if directories or files that are embedded resources contain '.' (other than the extension delimiter) then they are considered directory separators. The following embedded resources have the same directory structure.")
                ),
                CodeBlock(
                    @"
AssemblyWith.Period/Folder1/Folder2/Test/File.txt
AssemblyWith.Period/Folder1.Folder2/Test/File.txt
AssemblyWith.Period/Folder1/Folder2/Test.File.txt
AssemblyWith.Period/Folder1.Folder2.Test.File.txt

All of the above have the same directory structure:
AssemblyWith.Period/Folder1/Folder2/Test/File.txt
                    ".Trim()
                ),
                Paragraph(
                    Text("The second way of using the library is by loading multiple assemblies. This is similar to the first scenario only that in this case a root "),
                    MemberReference(memberReferenceFactory.Create(typeof(EmbeddedDirectory))),
                    Text(" is created that contains one "),
                    MemberReference(memberReferenceFactory.Create(typeof(EmbeddedDirectory))),
                    Text(" for each assembly.")
                ),
                Paragraph(
                    Text("To use the library, simply create a new "),
                    MemberReference(memberReferenceFactory.Create(typeof(EmbeddedDirectory))),
                    Text(" and provide the assembly or assemblies to the constructor parameter.")
                )
            );
        }
    }
}